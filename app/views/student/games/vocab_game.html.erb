<style>
* {
  box-sizing: border-box;
  font-family: "Poppins", sans-serif;
  color: #19084e;
}
body {
  margin: 0;
  background-color: #9873fe;
}
button {
  border: none;
  outline: none;
  cursor: pointer;
}
.start-screen,
.score-container {
  position: absolute;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  background-color: #9873fe;
}
#start-button,
#restart {
  position: absolute;
  font-size: 1.2em;
  padding: 1em 3em;
  border-radius: 2em;
  box-shadow: 0 1em 3em rgba(37, 22, 80, 0.3);
}
.flex-space {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.flex {
  display: flex;
}
#display-container {
  background-color: #ffffff;
  position: absolute;
  width: 90%;
  max-width: 37em;
  transform: translate(-50%, -50%);
  left: 50%;
  top: 50%;
  padding: 3em 2em;
  border-radius: 0.8em;
  box-shadow: 0 1em 3em rgba(37, 22, 80, 0.3);
}
.header {
  padding: 0.5em;
  border-bottom: 1px solid #c8c5d1;
}
.header .title,
.timer span {
  font-weight: 600;
}
.question-color {
  font-size: 1.5em;
  text-align: center;
}
#container {
  margin-bottom: 1em;
}
.button-container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1em;
  place-items: center;
}
.option-div {
  width: 100%;
  height: 10em;
  padding: 1em;
  margin: 0.3em 0;
  text-align: center;
  border-radius: 0.5em;
  position: relative;
  z-index: 1;
}

.option-div .emoji {
  font-size: 3em; /* Larger font size for emojis */
  display: inline-block; /* Inline block for scaling */
  transform: scale(1.5); /* Scale the emoji */
  transition: transform 0.2s; /* Smooth transition for scaling */
  z-index: 1;
}

.option-div:disabled {
  cursor: not-allowed;
}

.correct {
  background: url("/assets/correct.svg");
  z-index: 2;
}
.incorrect {
  background: url("/assets/incorrect.svg");
  z-index: 2;
}
.correct,
.incorrect {
  background-repeat: no-repeat;
  background-size: 3em;
  background-position: center;
  z-index: 2;
}
#next-button {
  font-size: 1.1em;
  background-color: #9873fe;
  color: #ffffff;
  padding: 0.4em 2em;
  border-radius: 0.3em;
}
.hide {
  display: none;
}
#restart {
  margin-top: 6em;
}
</style>

  <body>
    <div id="display-container">
      <div class="header flex-space">
        <div class="title">
          <p>Vocab Game</p>
        </div>
        <div class="timer"></div>
      </div>

      <div id="container">
        <!-- Questions and options are displayed here-->
      </div>

      <div class="flex-space">
        <div class="number-of-count">
          <span class="number-of-questions"></span>
        </div>
        <div id="next-button">Next</div>
      </div>
    </div>

    <div class="start-screen">
      <button id="start-button">Start</button>
    </div>

    <div class="score-container hide">
      <div id="user-score"></div>
      <button id="restart">Restart</button>
    </div>

    <script>

let timer = document.getElementsByClassName("timer")[0];
let quizContainer = document.getElementById("container");
let nextButton = document.getElementById("next-button");
let numOfQuestions = document.getElementsByClassName("number-of-questions")[0];
let displayContainer = document.getElementById("display-container");
let scoreContainer = document.querySelector(".score-container");
let restart = document.getElementById("restart");
let userScore = document.getElementById("user-score");
let startScreen = document.querySelector(".start-screen");
let startButton = document.getElementById("start-button");
let questionCount;
let scoreCount = 0;
let count = 10;
let countdown;

// Words and emojis array
const wordEmojiMap = {
  "Apple": "🍎",
  "Banana": "🍌",
  "Cherry": "🍒",
  "Grapes": "🍇",
  "Orange": "🍊",
  "Peach": "🍑",
  "Pear": "🍐",
  "Pineapple": "🍍",
  "Strawberry": "🍓",
  "Watermelon": "🍉"
};

// Questions and Options Array
let quizArray = [];

// Generate a random value from an array
const generateRandomValue = (array) =>
  array[Math.floor(Math.random() * array.length)];

// Generate random options
const populateOptions = (correctEmoji) => {
  let optionsArray = [correctEmoji];
  while (optionsArray.length < 4) {
    let randomEmoji = generateRandomValue(Object.values(wordEmojiMap));
    if (!optionsArray.includes(randomEmoji)) {
      optionsArray.push(randomEmoji);
    }
  }
  return optionsArray;
};

// Create quiz questions
const populateQuiz = () => {
  // Create a shuffled array of unique words
  let words = Object.keys(wordEmojiMap);
  words = words.sort(() => Math.random() - 0.5);

  // Ensure we only use as many words as we have questions for
  words = words.slice(0, 5);

  for (let word of words) {
    let correctEmoji = wordEmojiMap[word];
    let allEmojis = populateOptions(correctEmoji);
    quizArray.push({
      id: quizArray.length,
      word: word,
      correct: correctEmoji,
      options: allEmojis,
    });
  }
};

// Display the quiz
const quizDisplay = (questionCount) => {
  let quizCards = document.querySelectorAll(".container-mid");
  // Hide other cards
  quizCards.forEach((card) => {
    card.classList.add("hide");
  });
  // Display the current question card
  quizCards[questionCount].classList.remove("hide");
};

// Create quiz cards
function quizCreator() {
  // Randomly sort questions
  quizArray.sort(() => Math.random() - 0.5);
  // Generate quiz
  for (let i of quizArray) {
    // Randomly sort options
    i.options.sort(() => Math.random() - 0.5);
    // Create quiz card
    let div = document.createElement("div");
    div.classList.add("container-mid", "hide");

    // Display question number
    numOfQuestions.innerHTML = `${questionCount + 1} of ${quizArray.length} Question`;

    // Create question
    let questionDiv = document.createElement("p");
    questionDiv.classList.add("question");
    questionDiv.innerHTML = `<div class="question-color">${i.word}</div>`;
    div.appendChild(questionDiv);

    // Create options
div.innerHTML += `
  <div class="button-container">
    <button class="option-div" onclick="checker(this)" data-option="${i.options[0]}">
      <span class="emoji">${i.options[0]}</span>
    </button>
    <button class="option-div" onclick="checker(this)" data-option="${i.options[1]}">
      <span class="emoji">${i.options[1]}</span>
    </button>
    <button class="option-div" onclick="checker(this)" data-option="${i.options[2]}">
      <span class="emoji">${i.options[2]}</span>
    </button>
    <button class="option-div" onclick="checker(this)" data-option="${i.options[3]}">
      <span class="emoji">${i.options[3]}</span>
    </button>
  </div>
`;
    quizContainer.appendChild(div);
  }
}

// Check user's answer
function checker(userOption) {
  let userSolution = userOption.getAttribute("data-option");
  let question = document.getElementsByClassName("container-mid")[questionCount];
  let options = question.querySelectorAll(".option-div");
  // Check if the user's answer is correct
  if (userSolution === quizArray[questionCount].correct) {
    userOption.classList.add("correct");
    scoreCount++;
  } else {
    userOption.classList.add("incorrect");
    options.forEach((element) => {
      if (element.getAttribute("data-option") === quizArray[questionCount].correct) {
        element.classList.add("correct");
      }
    });
  }
  // Clear interval and disable all options
  clearInterval(countdown);
  options.forEach((element) => {
    element.disabled = true;
  });
  nextButton.classList.remove("hide");
}

// Initialize the game
function initial() {
  nextButton.classList.add("hide");
  quizContainer.innerHTML = "";
  questionCount = 0;
  scoreCount = 0;
  clearInterval(countdown);
  count = 10;
  timerDisplay();
  quizCreator();
  quizDisplay(questionCount);
}

// Handle next button click
nextButton.addEventListener("click", () => {
  // Increment questionCount
  questionCount += 1;
  // If it's the last question
  if (questionCount === quizArray.length) {
    // Hide question container and display score
    displayContainer.classList.add("hide");
    scoreContainer.classList.remove("hide");
    // Show user score
    userScore.innerHTML = `Your score is ${scoreCount} out of ${quizArray.length}`;
  } else {
    // Display question count
    numOfQuestions.innerHTML = `${questionCount + 1} of ${quizArray.length} Question`;
    // Display quiz
    quizDisplay(questionCount);
    // Reset countdown timer
    count = 10;
    clearInterval(countdown);
    timerDisplay();
  }
  nextButton.classList.add("hide");
});

// Timer display
const timerDisplay = () => {
  countdown = setInterval(() => {
    timer.innerHTML = `<span>Time Left: </span> ${count}s`;
    count--;
    if (count < 0) {
      clearInterval(countdown);
      nextButton.click();
    }
  }, 1000);
};

// Restart the game
restart.addEventListener("click", () => {
  quizArray = [];
  populateQuiz();
  initial();
  displayContainer.classList.remove("hide");
  scoreContainer.classList.add("hide");
});

// Start the game
startButton.addEventListener("click", () => {
  startScreen.classList.add("hide");
  displayContainer.classList.remove("hide");
  quizArray = [];
  populateQuiz();
  initial();
});

    </script>
  </body>
</html>
